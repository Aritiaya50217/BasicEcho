Reverse Proxy 
    ระบบที่ทำหน้าที่เป็นตัวกลางในการรับคำขอจากผู้ใช้ (client) และส่งคำขอเหล่านั้นไปยังเซิร์ฟเวอร์จริง (backend server) ซึ่งจะตอบกลับข้อมูลไปยัง reverse proxy อีกทีหนึ่ง แล้วส่งข้อมูลเหล่านั้นไปยังผู้ใช้

    ในทางปฏิบัติ reverse proxy มักใช้เพื่อ:

    1. การกระจายโหลด (Load Balancing): Reverse proxy สามารถกระจายคำขอไปยังหลายๆ เซิร์ฟเวอร์เพื่อช่วยให้โหลดกระจายไปยังเซิร์ฟเวอร์ต่างๆ ซึ่งช่วยเพิ่มประสิทธิภาพในการให้บริการ
    2. การเพิ่มความปลอดภัย: เมื่อมีการใช้ reverse proxy, client จะไม่สามารถเข้าถึงเซิร์ฟเวอร์จริงได้โดยตรง ซึ่งช่วยปกป้องเซิร์ฟเวอร์ภายในจากการโจมตีจากภายนอก
    3. การเข้ารหัส (SSL Termination): สามารถทำการเข้ารหัส SSL ใน reverse proxy แทนการให้เซิร์ฟเวอร์จริงต้องทำ ซึ่งช่วยลดภาระให้กับเซิร์ฟเวอร์จริง
    4. การทำ Caching: สามารถเก็บข้อมูลที่เคยตอบกลับแล้ว เพื่อไม่ให้ต้องไปขอข้อมูลจากเซิร์ฟเวอร์จริงซ้ำๆ ซึ่งช่วยเพิ่มความเร็วในการตอบกลับ
    5. การทำ Authentication หรือ Authorization: สามารถตรวจสอบสิทธิ์ผู้ใช้งานหรือการยืนยันตัวตนก่อนที่ข้อมูลจะไปถึงเซิร์ฟเวอร์จริง

    ตัวอย่างของ reverse proxy ที่ใช้กันทั่วไป ได้แก่ Nginx, Apache HTTP Server, และ HAProxy.
    ปกติแล้ว reverse proxy จะทำงานในรูปแบบที่ผู้ใช้ไม่สามารถเห็นว่าอยู่เบื้องหลังหรือไม่รู้ว่าเซิร์ฟเวอร์จริงคืออะไร


NewRoundRobinBalancer 
    ฟังก์ชันหรือคอนเซ็ปต์ที่มักพบในระบบการกระจายโหลด (load balancing) โดยเฉพาะในไลบรารีหรือเฟรมเวิร์กที่เกี่ยวกับการทำ load balancing เช่นใน Go (Golang) หรือระบบที่ใช้วิธีการกระจายคำขอไปยังเซิร์ฟเวอร์ต่าง ๆ โดยการใช้ Round Robin Algorithm.

    Round Robin 
        อัลกอริธึมที่ใช้ในการกระจายคำขอไปยังเซิร์ฟเวอร์ต่างๆ ตามลำดับ เช่น ถ้ามีเซิร์ฟเวอร์ 3 ตัว, คำขอที่เข้ามาแรกจะไปยังเซิร์ฟเวอร์ 1, คำขอที่สองจะไปยังเซิร์ฟเวอร์ 2, คำขอที่สามจะไปยังเซิร์ฟเวอร์ 3, แล้วก็กลับมาที่เซิร์ฟเวอร์ 1 และวนลูปไปเรื่อยๆ

    การใช้งาน NewRoundRobinBalancer
    ในบางกรณี เช่นใน Go (Golang) ที่ใช้ไลบรารี grpc หรือ golang.org/x/net/http2 คุณจะพบฟังก์ชัน NewRoundRobinBalancer หรือสิ่งที่คล้ายกัน ที่ใช้ในการสร้างอ็อบเจ็กต์สำหรับทำ load balancing แบบ round robin    